security:
    # https://symfony.com/doc/current/security/authenticator_manager.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#c-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        users_in_memory: { memory: null }
        users_in_database:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern: ^/user/login
            stateless: true
            provider: users_in_database
            #json_login:
            #    check_path: /user/login
            #    username_path: email
             #   password_path: password
              #  success_handler: lexik_jwt_authentication.handler.authentication_success
               # failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern: ^/
            stateless: true
            provider: users_in_database
            jwt: ~

        main:
            stateless: true
            lazy: true
            provider: users_in_database
            #json_login:
            #    check_path: /user/login
            #    username_path: email
             #   password_path: password
            #    success_handler: lexik_jwt_authentication.handler.authentication_success
             #   failure_handler: lexik_jwt_authentication.handler.authentication_failure

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    #access_control:
     #    - { path: ^/user/login, roles: PUBLIC_ACCESS }
      #   - { path: ^/user/signup, roles: PUBLIC_ACCESS }
       #  - { path: ^/user/delete, roles: IS_AUTHENTICATED_FULLY }
        # - { path: ^/post, roles: PUBLIC_ACCESS }
         #- { path: ^/post/create, roles: IS_AUTHENTICATED_FULLY }
         #- { path: ^/post/delete, roles: IS_AUTHENTICATED_FULLY }
